/*
const Reservation  = require('../models/reservation.model');
const Notification = require('../models/notification.model');

exports.create = async (dto) => {
    const res = await Reservation.create(dto);
    await Notification.create({
        reservation_id: res.id,
        titre : 'Nouvelle r√©servation',
        message: 'Une nouvelle r√©servation a √©t√© cr√©√©e.'
    });
    return res;
};

exports.cancel = async (id, userId) => {
    const r = await Reservation.findById(id);
    if (!r || r.id_utilisateur !== userId)
        throw new Error('R√©servation non trouv√©e ou interdite');

    await Reservation.delete(id);
    await Notification.create({
        reservation_id: id,
        titre : 'R√©servation annul√©e',
        message: 'Le client a annul√© sa r√©servation.'
    });
};

exports.listForUser = async (userId, role) => {
    if (role === 'client')    return Reservation.forClientFull(userId);
    if (role === 'chauffeur') return Reservation.forChauffeurFull(userId);
    return Reservation.allFull();                 // admin
};

const { pool: poolR } = require('../config/db');

exports.updateStatut = async (id, newStatut) => {
    console.log("üü° ID re√ßu pour updateStatut :", id);

    // V√©rifie si la r√©servation existe
    const { rows } = await poolR.query(
        `SELECT * FROM Reservation WHERE id = $1`,
        [id]
    );

    if (rows.length === 0) {
        console.error("üî¥ Aucune r√©servation trouv√©e avec l'ID :", id);
        throw new Error("R√©servation introuvable");
    }

    // Mise √† jour du statut
    const updated = await poolR.query(
        `UPDATE Reservation SET statut = $1 WHERE id = $2 RETURNING *`,
        [newStatut, id]
    );

    return updated.rows[0];
};



exports.validateByClient = async (id, clientId, statut, message = null) => {
    const res = await Reservation.findById(id);
    if (!res || res.id_utilisateur !== clientId)
        throw new Error('R√©servation non trouv√©e ou interdite');

    const updated = await Reservation.updateStatus(id, statut);

    if (statut === 'litige' && message) {
        await Reservation.setLitigeMessage(id, message);
    }

    await Notification.create({
        reservation_id: id,
        titre: `R√©servation ${statut}`,
        message: statut === 'litige'
            ? `Le client a signal√© un probl√®me sur cette course.`
            : `Le client a confirm√© la fin de la course.`
    });

    return updated;
};

exports.autoCompleteOldReservations = async () => {
    const { rows } = await poolR.query(`
        SELECT * FROM reservation
        WHERE statut = 'accept√©e'
          AND date_prise_en_charge < NOW() - INTERVAL '48 hours'
          AND NOT (client_confirmation AND chauffeur_confirmation)
    `);

    for (const r of rows) {
        await poolR.query(`UPDATE reservation SET statut = 'termin√©e' WHERE id = $1`, [r.id]);

        const stripe = require('../config/stripe');
        await stripe.paymentIntents.capture(r.stripe_payment_intent_id);

        await poolR.query(`UPDATE paiement SET statut = 'valid√©', updated_at = NOW() WHERE reservation_id = $1`, [r.id]);

        await Notification.create({
            reservation_id: r.id,
            titre: 'R√©servation termin√©e automatiquement',
            message: 'La r√©servation a √©t√© marqu√©e comme termin√©e apr√®s 48h sans validation.'
        });
    }

    return rows.length;
};

exports.cancel = async (id, userId) => {
    const r = await Reservation.findById(id);

    if (!r || (r.id_utilisateur !== userId && r.id_taxi !== userId))
        throw new Error('R√©servation non trouv√©e ou interdite');

    const now = new Date();
    const datePrise = new Date(r.date_prise_en_charge);
    const diffMinutes = (datePrise - now) / 60000;

    if (diffMinutes < 5) {
        throw new Error('Impossible d‚Äôannuler moins de 5 minutes avant la prise en charge.');
    }

    await Reservation.delete(id);
    await Notification.create({
        reservation_id: id,
        titre : 'R√©servation annul√©e',
        message: 'La r√©servation a √©t√© annul√©e par un utilisateur.'
    });
};

exports.validateByChauffeur = async (id, chauffeurUserId) => {
    const resa = await Reservation.findById(id);
    if (!resa) throw new Error("R√©servation introuvable");

    // V√©rifie que le chauffeur correspond
    const ch = await poolR.query(`SELECT * FROM chauffeur WHERE id = $1`, [resa.id_taxi]);
    if (ch.rows[0]?.user_id !== chauffeurUserId) throw new Error("Non autoris√©");

    await poolR.query(`UPDATE reservation SET chauffeur_confirmation = TRUE WHERE id = $1`, [id]);

    const updated = await Reservation.findById(id);

    if (updated.client_confirmation && updated.chauffeur_confirmation) {
        // ‚úÖ Les deux ont valid√© ‚Üí capture paiement
        const stripe = require('../config/stripe');
        await stripe.paymentIntents.capture(updated.stripe_payment_intent_id);

        await poolR.query(`
            UPDATE paiement SET statut = 'valid√©', updated_at = NOW()
            WHERE reservation_id = $1
        `, [id]);
    }

    return updated;
};
*/

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// services/reservation.service.js (Complet et Corrig√©)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const reservationModel = require('../models/reservation.model');
const paiementService = require('./paiement.service'); // Assurez-vous que le chemin est correct

exports.create = async (reservationData) => {
    return reservationModel.create(reservationData);
};

exports.cancel = async (reservationId, userId) => {
    const currentReservation = await reservationModel.findById(reservationId);
    if (!currentReservation) {
        throw new Error('R√©servation non trouv√©e.');
    }
    // V√©rification de l'autorisation d'annuler
    // Assurez-vous d'avoir une logique pour r√©cup√©rer l'ID du chauffeur li√© au userId si n√©cessaire
    // Par simplicit√© ici, on permet √† l'utilisateur de la r√©servation ou au chauffeur assign√© de l'annuler
    if (currentReservation.id_utilisateur !== userId && currentReservation.id_taxi !== userId) {
        // Cette logique n√©cessiterait une v√©rification de l'ID utilisateur du chauffeur
        // pour s'assurer que c'est bien le chauffeur assign√© ou le client.
        // Pour l'instant, on assume que id_taxi dans la table reservation est l'ID du chauffeur,
        // et qu'on compare avec userId (ID de l'utilisateur qui fait la requ√™te).
        // Il faudrait peut-√™tre une jointure pour comparer user_id du chauffeur.
        throw new Error('Non autoris√© √† annuler cette r√©servation.');
    }

    // Si la r√©servation avait un Payment Intent pr√©-autoris√©, il faut l'annuler/rembourser
    if (currentReservation.stripe_payment_intent_id) {
        try {
            // Ici, vous devrez ajouter une fonction dans paiementService pour annuler un Payment Intent
            // par son ID Stripe. Exemple:
            await paiementService.cancelPaymentIntent(currentReservation.stripe_payment_intent_id);
            console.log(`Le Payment Intent ${currentReservation.stripe_payment_intent_id} a √©t√© annul√© car la r√©servation ${reservationId} est annul√©e.`);
        } catch (error) {
            console.error(`Erreur lors de l'annulation/remboursement du Payment Intent ${currentReservation.stripe_payment_intent_id}:`, error.message);
            // D√©cidez si vous voulez permettre l'annulation de la r√©servation m√™me si l'annulation du paiement √©choue.
            // Pour l'instant, l'erreur est logg√©e mais n'emp√™che pas l'annulation de la r√©servation.
        }
    }
    return reservationModel.updateStatus(reservationId, 'annul√©e');
};

// listForUser accepte maintenant un param√®tre 'statut' pour filtrer les r√©sultats
exports.listForUser = async (userId, role, statut = null) => {
    if (role === 'client') {
        return reservationModel.forClientFull(userId, statut);
    } else if (role === 'chauffeur') {
        return reservationModel.forChauffeurFull(userId, statut);
    }
    // Pour l'admin ou si le r√¥le n'est pas client/chauffeur
    return reservationModel.allFull(statut); // Pour l'admin, peut √™tre filtr√© par statut
};

// Fonction centralis√©e pour valider une course et potentiellement capturer le paiement
// Cette fonction est appel√©e pour les statuts qui m√®nent √† la capture (principalement 'termin√©e')
exports.validateAndCapturePayment = async (reservationId, statut) => {
    // Met √† jour le statut de la r√©servation
    const updatedReservation = await reservationModel.updateStatus(reservationId, statut);

    // Si le statut final est 'termin√©e', on proc√®de √† la capture du paiement
    if (statut === 'termin√©e') {
        const stripePaymentIntentId = updatedReservation.stripe_payment_intent_id; // Utilise l'ID du PI de la r√©servation mise √† jour

        if (stripePaymentIntentId) {
            console.log(`R√©servation ${reservationId} marqu√©e comme termin√©e. Tentative de capture du Payment Intent: ${stripePaymentIntentId}`);
            try {
                await paiementService.capturePayment(stripePaymentIntentId); // Appelle le service de paiement pour capturer
                console.log(`Paiement captur√© avec succ√®s pour la r√©servation ${reservationId}.`);
            } catch (error) {
                console.error(`‚ùå Erreur lors de la capture du paiement pour la r√©servation ${reservationId}:`, error.message);
                throw new Error(`Erreur lors de la capture du paiement : ${error.message}`);
            }
        } else {
            console.warn(`Aucun Stripe Payment Intent ID trouv√© pour la r√©servation ${reservationId}. Paiement non captur√©.`);
            // D√©cidez ici si c'est une erreur critique ou juste un avertissement
        }
    }
    return updatedReservation;
};

// Validation c√¥t√© client (peut terminer la course ou ouvrir un litige)
exports.validateByClient = async (reservationId, userId, statut, message = null) => {
    const resa = await reservationModel.findById(reservationId);
    if (!resa || resa.id_utilisateur !== userId) {
        throw new Error('R√©servation non trouv√©e ou non autoris√©e pour ce client.');
    }
    // D√©l√®gue la mise √† jour du statut et la capture potentielle √† validateAndCapturePayment
    const updated = await exports.validateAndCapturePayment(reservationId, statut);

    // Si le statut est 'litige', enregistre le message
    if (statut === 'litige' && message) {
        await reservationModel.setLitigeMessage(reservationId, message);
    }
    return updated;
};

// Validation c√¥t√© chauffeur (marque la course comme 'termin√©e')
exports.validateByChauffeur = async (reservationId, chauffeurUserId) => {
    const resa = await reservationModel.findById(reservationId);
    if (!resa) {
        throw new Error("R√©servation introuvable.");
    }

    // V√©rifie que l'utilisateur qui valide est bien le chauffeur assign√© √† la r√©servation
    // Cette partie n√©cessite l'importation de poolR pour fonctionner si non d√©j√† pr√©sent.
    // Ou bien un appel au model chauffeur.
    // Exemple: const chauffeur = await chauffeurModel.findByUserId(chauffeurUserId);
    // if (!chauffeur || chauffeur.id !== resa.id_taxi) { ... }
    const chauffeur = await poolR.query(`SELECT user_id FROM chauffeur WHERE id = $1`, [resa.id_taxi]);
    if (chauffeur.rows.length === 0 || chauffeur.rows[0].user_id !== chauffeurUserId) {
        throw new Error("Action non autoris√©e : Le chauffeur ne correspond pas √† cette r√©servation.");
    }

    // Le chauffeur valide = la course est termin√©e. D√©clenche la capture de paiement.
    return exports.validateAndCapturePayment(reservationId, 'termin√©e');
};

// Fonction pour g√©rer l'auto-compl√©tion des anciennes r√©servations (n√©cessitera une logique de capture de paiement)
exports.autoCompleteOldReservations = async () => {
    console.log("autoCompleteOldReservations appel√©e. La logique de capture automatique des paiements pour les r√©servations termin√©es automatiquement doit √™tre impl√©ment√©e ici si le statut devient 'termin√©e'.");
    // Exemple d'impl√©mentation partielle (√† compl√©ter avec la capture pour chaque r√©servation)
    // const { rows } = await poolR.query(`
    //     SELECT * FROM reservation
    //     WHERE statut = 'accept√©e' AND date_prise_en_charge < NOW() - INTERVAL 'X hours/days'
    // `);
    // for (const r of rows) {
    //     await exports.validateAndCapturePayment(r.id, 'termin√©e'); // Utiliser la fonction de capture
    // }
    return 0; // Retourne le nombre de r√©servations trait√©es
};
