// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// services/paiement.service.js (Complet et Corrig√©)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const { pool } = require('../config/db'); // Assurez-vous que 'pool' est bien import√© d'ici
const stripe = require('../config/stripe'); // Assurez-vous que Stripe est initialis√© ici

// Cr√©e un Payment Intent (pr√©-autorisation)
exports.createPaymentIntent = async (reservationId, amount) => {
    console.log('‚ñ∂Ô∏è [paiement.service.js] ‚ûú D√©but cr√©ation PaymentIntent');
    console.log('‚ÑπÔ∏è Donn√©es re√ßues : reservationId =', reservationId, ', amount =', amount);

    const amountFloat = parseFloat(amount);
    if (isNaN(amountFloat)) {
        console.error('‚ùå Montant invalide (non num√©rique) re√ßu :', amount);
        throw new Error('Montant invalide');
    }

    const amountInCents = Math.round(amountFloat * 100);
    console.log('üí∞ Montant converti en centimes pour Stripe :', amountInCents);

    try {
        const paymentIntent = await stripe.paymentIntents.create({
            amount: amountInCents,
            currency: 'eur',
            capture_method: 'manual', // Indique que le paiement doit √™tre captur√© manuellement plus tard
        });

        console.log('‚úÖ PaymentIntent cr√©√© avec ID Stripe :', paymentIntent.id);

        // Cr√©ez l'entr√©e de paiement initiale dans la BDD avec le statut 'pr√©autoris√©'.
        // reservation_id peut √™tre NULL √† ce stade, il sera li√© plus tard via linkIntentToReservation.
        await pool.query(`
            INSERT INTO paiement (reservation_id, montant, statut, methode, stripe_payment_intent_id)
            VALUES ($1, $2, 'pr√©autoris√©', 'CB', $3)
        `, [reservationId, amountFloat, paymentIntent.id]); // $1 sera null si reservationId est null

        console.log('üóÉÔ∏è Paiement enregistr√© (pr√©-autorisation). Liaison √† la r√©servation en attente si n√©cessaire.');

        return paymentIntent.client_secret; // Le client secret est envoy√© au frontend pour la Payment Sheet
    } catch (error) {
        console.error('‚ùå Erreur Stripe ou BDD lors de la cr√©ation du PaymentIntent :', error.message);
        throw error;
    }
};

// Capture un Payment Intent apr√®s la double validation
exports.capturePayment = async (paymentIntentId) => {
    console.log(`‚ñ∂Ô∏è [paiement.service.js] ‚ûú D√©but capture PaymentIntent: ${paymentIntentId}`);
    try {
        const intent = await stripe.paymentIntents.capture(paymentIntentId);

        await pool.query(`
            UPDATE paiement
            SET statut = 'valid√©', updated_at = CURRENT_TIMESTAMP
            WHERE stripe_payment_intent_id = $1
        `, [paymentIntentId]);

        console.log(`‚úÖ PaymentIntent ${paymentIntentId} captur√©. Statut BDD mis √† jour.`);
        return intent;
    } catch (error) {
        console.error(`‚ùå Erreur Stripe ou BDD lors de la capture du PaymentIntent ${paymentIntentId}:`, error.message);
        throw error;
    }
};

// Rembourse un Payment Intent (utilis√© en cas d'annulation totale ou litige)
exports.refundPayment = async (paymentIntentId) => {
    console.log(`‚ñ∂Ô∏è [paiement.service.js] ‚ûú D√©but remboursement PaymentIntent: ${paymentIntentId}`);
    try {
        const refund = await stripe.refunds.create({
            payment_intent: paymentIntentId,
            // amount: amountToRefund, // Optionnel: sp√©cifier un montant de remboursement partiel
        });

        await pool.query(`
            UPDATE paiement
            SET statut = 'rembours√©', stripe_refund_id = $1, updated_at = CURRENT_TIMESTAMP
            WHERE stripe_payment_intent_id = $2
        `, [refund.id, paymentIntentId]);

        console.log(`‚úÖ PaymentIntent ${paymentIntentId} rembours√©. Statut BDD mis √† jour.`);
        return refund;
    } catch (error) {
        console.error(`‚ùå Erreur Stripe ou BDD lors du remboursement du PaymentIntent ${paymentIntentId}:`, error.message);
        throw error;
    }
};

// ANNULE un Payment Intent (utilis√© si la pr√©-autorisation est annul√©e avant capture)
exports.cancelPaymentIntent = async (paymentIntentId) => {
    console.log(`‚ñ∂Ô∏è [paiement.service.js] ‚ûú D√©but annulation PaymentIntent: ${paymentIntentId}`);
    try {
        const canceledIntent = await stripe.paymentIntents.cancel(paymentIntentId);
        // Mettre √† jour le statut dans la BDD
        await pool.query(`
            UPDATE paiement
            SET statut = 'annul√©', updated_at = CURRENT_TIMESTAMP
            WHERE stripe_payment_intent_id = $1
        `, [paymentIntentId]);
        console.log(`‚úÖ PaymentIntent ${paymentIntentId} annul√©.`);
        return canceledIntent;
    } catch (error) {
        console.error(`‚ùå Erreur lors de l'annulation du PaymentIntent ${paymentIntentId}:`, error.message);
        throw error;
    }
};


// Lie un Payment Intent pr√©-autoris√© √† une r√©servation existante
exports.linkIntentToReservation = async (clientSecret, reservationId) => {
    console.log(`‚ñ∂Ô∏è [paiement.service.js] ‚ûú D√©but liaison PaymentIntent √† R√©servation ${reservationId}`);
    // Le clientSecret est de la forme pi_xxxx_secret_yyyy. On extrait l'ID de l'Intent.
    const paymentIntentId = clientSecret.split('_secret_')[0];

    // Mettre √† jour la table 'paiement' avec le reservation_id
    await pool.query(`
        UPDATE paiement
        SET reservation_id = $1, updated_at = CURRENT_TIMESTAMP
        WHERE stripe_payment_intent_id = $2
            RETURNING *;
    `, [reservationId, paymentIntentId]);

    // Mettre √† jour la table 'reservation' avec le stripe_payment_intent_id
    await pool.query(`
        UPDATE reservation
        SET stripe_payment_intent_id = $1, date_modification = NOW()
        WHERE id = $2;
    `, [paymentIntentId, reservationId]);

    console.log(`üîó Payment Intent ${paymentIntentId} li√© √† la r√©servation ${reservationId} en BDD.`);
    return { success: true };
};
