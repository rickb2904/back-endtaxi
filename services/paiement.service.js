// ============================
// paiement.service.js (modifi√©)
// ============================

const { pool } = require('../config/db'); // Assurez-vous que 'pool' est bien import√© d'ici
const stripe = require('../config/stripe');

exports.createPaymentIntent = async (reservationId, amount) => {
    console.log('‚ñ∂Ô∏è [paiement.service.js] ‚ûú D√©but cr√©ation PaymentIntent');
    console.log('‚ÑπÔ∏è Donn√©es re√ßues : reservationId =', reservationId, ', amount =', amount);

    const amountFloat = parseFloat(amount);
    if (isNaN(amountFloat)) {
        console.error('‚ùå Montant invalide (non num√©rique) re√ßu :', amount);
        throw new Error('Montant invalide');
    }

    const amountInCents = Math.round(amountFloat * 100);
    console.log('üí∞ Montant converti en centimes pour Stripe :', amountInCents);

    try {
        const paymentIntent = await stripe.paymentIntents.create({
            amount: amountInCents,
            currency: 'eur',
            capture_method: 'manual',
        });

        console.log('‚úÖ PaymentIntent cr√©√© avec ID Stripe :', paymentIntent.id);

        // Cr√©ez l'entr√©e de paiement initiale SANS reservation_id si elle n'est pas encore cr√©√©e
        // Nous utilisons 'pr√©autoris√©' comme statut, qui est g√©n√©ralement inclus dans les contraintes Stripe.
        await pool.query(`
            INSERT INTO paiement (reservation_id, montant, statut, methode, stripe_payment_intent_id)
            VALUES ($1, $2, 'pr√©autoris√©', 'CB', $3) -- <--- ASSUREZ-VOUS QUE C'EST BIEN 'pr√©autoris√©' ICI
        `, [reservationId, amountFloat, paymentIntent.id]);

        // Si la r√©servation est d√©j√† cr√©√©e √† ce stade (ce qui est le cas dans le flux actuel),
        // mettez √† jour son stripe_payment_intent_id.
        if (reservationId) {
            await pool.query(`
                UPDATE reservation
                SET stripe_payment_intent_id = $1
                WHERE id = $2
            `, [paymentIntent.id, reservationId]);
            console.log('üóÉÔ∏è Paiement enregistr√© et li√© √† la r√©servation.');
        } else {
            console.log('üóÉÔ∏è Paiement enregistr√©. Liaison √† la r√©servation en attente de confirmation.');
        }

        return paymentIntent.client_secret;
    } catch (error) {
        console.error('‚ùå Erreur Stripe ou BDD :', error.message);
        throw error;
    }
};

exports.capturePayment = async (paymentIntentId) => {
    const intent = await stripe.paymentIntents.capture(paymentIntentId);

    await pool.query(`
        UPDATE paiement
        SET statut = 'valid√©', updated_at = CURRENT_TIMESTAMP
        WHERE stripe_payment_intent_id = $1
    `, [paymentIntentId]);

    return intent;
};

exports.refundPayment = async (paymentIntentId) => {
    const refund = await stripe.refunds.create({
        payment_intent: paymentIntentId,
    });

    await pool.query(`
        UPDATE paiement
        SET statut = 'rembours√©', stripe_refund_id = $1, updated_at = CURRENT_TIMESTAMP
        WHERE stripe_payment_intent_id = $2
    `, [refund.id, paymentIntentId]);

    return refund;
};

// --- NOUVELLE FONCTION AJOUT√âE ---
exports.linkIntentToReservation = async (clientSecret, reservationId) => {
    // D√©codons le clientSecret pour obtenir l'ID du Payment Intent
    const paymentIntentId = clientSecret.split('_secret_')[0];

    // Mettre √† jour la table 'paiement' avec le reservation_id
    await pool.query(`
        UPDATE paiement
        SET reservation_id = $1, updated_at = CURRENT_TIMESTAMP
        WHERE stripe_payment_intent_id = $2
            RETURNING *;
    `, [reservationId, paymentIntentId]);

    // Mettre √† jour la table 'reservation' avec le stripe_payment_intent_id
    await pool.query(`
        UPDATE reservation
        SET stripe_payment_intent_id = $1
        WHERE id = $2;
    `, [paymentIntentId, reservationId]);

    console.log(`üîó Payment Intent ${paymentIntentId} li√© √† la r√©servation ${reservationId} en BDD.`);
    return { success: true };
};
